The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119.

*Sublime settings are highlighted between { and }*

{{{
{
    // Encoding used when saving new files, and files opened with an undefined
    // encoding (e.g., plain ascii files). If a file is opened with a specific
    // encoding (either detected or given explicitly), this setting will be
    // ignored, and the file will be saved with the encoding it was opened
    // with.
    "default_encoding": "UTF-8",

    // The number of spaces a tab is considered equal to
    "tab_size": 4, 

    // Set to true to insert spaces when tab is pressed
    "translate_tabs_to_spaces": true,

    // Columns in which to display vertical rulers
    "rulers": [80, 120],

    // Determines what character(s) are used to terminate each line in new files.
    // Valid values are 'system' (whatever the OS uses), 'windows' (CRLF) and
    // 'unix' (LF only).
    "default_line_ending": "unix",

    // Set to true to ensure the last line of the file ends in a newline
    // character when saving
    "ensure_newline_at_eof_on_save": true
}
}}}

==== PSR-0 Autoloading ====

==== PSR-1 Basic Coding ====

  # PHP code MUST use the long `<?php ?>` tags; it MUST NOT use the other tag variations.
  # Code files MUST use only UTF-8 {`"default_encoding": "UTF-8"`}
  # Files SHOULD either declare symbols (classes, functions, constants, etc.) or cause side-effects (e.g. generate output, change .ini settings,explicit use of require or include, connecting to external services, emitting errors or exceptions, modifying global or static variables, reading from or writing to a file, etc.) but SHOULD NOT do both.
  # Namespaces and classes MUST follow PSR-0.
  # Class names MUST be declared in `StudlyCaps`

==== PSR-2 Coding Style ====

  # Code MUST use 4 spaces for indenting, not tabs. {`"tab_size": 4, "translate_tabs_to_spaces": true`}
  # There MUST NOT be a hard limit on line length; the soft limit MUST be 120 characters; {` "rulers": [80, 120]`}
  # Visibility MUST be declared on all properties and methods; 
  # `abstract` and `final` MUST be declared before the visibility; 
  # The `var` keyword MUST NOT be used to declare a property. 
  # Property names SHOULD NOT be prefixed with a single underscore to indicate protected or private visibility
  # Opening braces for control structures MUST go on the same line, and closing braces MUST go on the next line after the body.
  # All code files MUST use the Unix LF (linefeed) line ending. {`"default_line_ending": "unix"`}
  # All code files MUST end with a single blank line. {`"ensure_newline_at_eof_on_save": true`}
  # The closing `?>` tag MUST be omitted from files containing only PHP.
  # PHP keywords MUST be in lower case. The PHP constants `true`, `false`, and `null` MUST be in lower case.
  # The `extends` and `implements` keywords MUST be declared on the same line as the class name.
  # Lists of implements MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one interface per line.
  # In the argument list, there MUST NOT be a space before each comma, and there MUST be one space after each comma.
  # Method arguments with default values MUST go at the end of the argument list.
  # Argument lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument per line.
  # The keyword `elseif` SHOULD be used instead of else if so that all control keywords look like single words.

==== PSR-4 Improved Autoloading ====

==== Aditional (specific to BareboneMVC) ====

  # Usage of `static` methods and `static` local variables is discouraged. Make sure you have an object oriented or a functional design before using `static`. And make sure you are not forcing procedural style over classes by using `static` in excess. If you still need to use `static` methods make sure that `static` keyword is written on the line above the method signature.

{{{
    /** 
     *
     */
    static
    public function FunctionName($value='')
    {
        # code...
    }
}}}

*What about letter cases and underscores?*

We have a very _liberal approach_ in this area. 

Maybe it is confusing,
but it is important to keep in mind only one rule: *don't put everything in the same basket*.

  # Constants are always `SCREAMING_CAPS`;
  # Local variables, object properties and function parameters are `snake_case`;
  # Functions that are not methods are often `snake_case`;
  # Methods are generally `camelCase`;

These rules are not mandatory, they are just advisory and won't be enforced on contributors.

After all, computer programming is about data structures, algorithms, architectures and interfaces and not so much about text formatting and typography.

Forget about CodingConventions. We are more concerned with:
  * [http://en.wikipedia.org/wiki/Don%27t_repeat_yourself DRY Principle]
  * [http://en.wikipedia.org/wiki/Separation_of_concerns Separation of concerns]
  * [http://en.wikipedia.org/wiki/Code_reuse Code reuse]
  * [http://en.wikipedia.org/wiki/Abstraction_principle_%28programming%29 Abstraction principles]

And speaking about DRY Principle: *Avoid [http://en.wikipedia.org/wiki/Copy_and_paste_programming Copy and paste programming] and [http://en.wikipedia.org/wiki/Cargo_cult_programming Cargo cult programming] at any price, dead or alive, no matter what.*

*What about hungarian notation?*

Hungarian notation is really stupid. Prefixing that way is not allowed in this project, except rare situations. 

Object type is a property of the object - let it as it is.

==== PHP specific ===

  # Access type `abstract` for interface methods must be omitted.