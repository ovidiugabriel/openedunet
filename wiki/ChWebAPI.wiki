Ch is a C/C++ dialect.

{{{
string_t request_scalar(string_t name)
}}}

|| *`name`* || ... ||
|| *returns* || ... ||

This does the same as calling `Request.getForm(name)`.
And it is the same as `$_REQUEST[name]` in PHP.

{{{
gint request_array(string_t key, gchar**& vals)
}}}

|| *`key`* || ... ||
|| *returns* || ... ||

This is the same as calling `Request.getForms(strcat(key, "[]"), vals)`.

And it is also the same as `$_REQUEST[name]` in PHP - but where it is automatically detected that `$_REQUEST[name]` is an array while in Ch CGI you have to assume (although you would say it is written it is part of an interface contract) that `name` is an array to decide to use `request_array()`.

{{{
gdouble doubleval(string_t str)
}}}

It is the same as `doubleval()` or `floatval()` in PHP - where both `float` and `double` are on 64-bits. Here in Ch, like in C/C++, only `double` is on 64-bits.

{{{
void get_double_values(gdouble* result, string_t* values, gint num)
}}}