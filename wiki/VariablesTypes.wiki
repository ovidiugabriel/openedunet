This is an exhaustive analysis of variable types in PHP. 

Usually you don't need this theory to write code in PHP. But still, our framework is designed to carefully take care of variable types. So if do you wish to use the framework or to contribute with code it is recommended to continue to read this document.

{{{
class variant {
    public string gettype() const;          // Get the type of a variable
    public bool settype(string type);       // Set the type of a variable

    public bool boolval() const;            // Get the boolean value of a variable (PHP 5 >= 5.5.0)
    public int intval() const;              // Get the integer value of a variable
    public string strval() const;           // Get string value of a variable
    public float floatval() const;          // Get float value of a variable

    public bool is_bool() const;            // Finds out whether a variable is a boolean 
    public bool is_float() const;           // Finds whether the type of a variable is float
    public bool is_int() const;             // Find whether the type of a variable is integer
    public bool is_string() const;          // Find whether the type of a variable is string
    public bool is_object() const;          // Finds whether a variable is an object
    public bool is_array() const;           // Finds whether a variable is an array

    public string get_class() const;        // Returns the name of the class of an object
}
}}}

=== gettype() ===

Get the type of a variable

{{{
public string variant::gettype() const;
const char* QVariant::typeName() const;
}}}

{{{
const char* gettype(QVariant& var) 
{
    return var.typeName();
}
}}}

=== settype() ===

Set the type of a variable

{{{
public bool variant::settype(string type);
}}}

=== boolval() ===

Get the boolean value of a variable (PHP 5 >= 5.5.0)

{{{
public bool variant::boolval() const;
bool 	toBool() const;
}}}

=== intval() ===

Get the integer value of a variable

{{{
public int variant::intval() const; 
int 	toInt(bool * ok = 0) const;
}}}

=== strval() ===

Get string value of a variable

{{{
public string variant::strval() const;
}}}

=== floatval() ===

Get float value of a variable

{{{
public float variant::floatval() const;
double 	toDouble(bool * ok = 0) const;
}}}

=== is_bool() ===
Finds out whether a variable is a boolean 
=== is_float() ===
Finds whether the type of a variable is float
=== is_int() ===
Find whether the type of a variable is integer
=== is_string() ===
Find whether the type of a variable is string
=== is_object() ===
Finds whether a variable is an object
=== is_array() ===
Finds whether a variable is an array
=== get_class() ===
Returns the name of the class of an object