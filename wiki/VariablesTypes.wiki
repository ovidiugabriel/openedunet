This is an exhaustive analysis of variables types in PHP. 

Usually you don't need this theory to write code in PHP. But still, our framework is designed to carefully take care of variable types where this is needed. So if do you wish to use the framework or to contribute to the code base it is recommended to continue reading this document.

== The `variant` type ==

In all our documentation, the `mixed` pseudo-type introduced by the official PHP manual has been replaced with `variant` pseudo-type which is used for documentation purposes only. The definition of the `variant` is the following:

{{{
class variant {
    private typeid type;

    public string gettype() const;          // Get the type of a variable
    public bool settype(string type);       // Set the type of a variable

    public bool boolval() const;            // Get the boolean value of a variable (PHP 5 >= 5.5.0)
    public int intval() const;              // Get the integer value of a variable
    public string strval() const;           // Get string value of a variable
    public float floatval() const;          // Get float value of a variable

    public bool is_bool() const;            // Finds out whether a variable is a boolean 
    public bool is_float() const;           // Finds whether the type of a variable is float
    public bool is_int() const;             // Find whether the type of a variable is integer
    public bool is_string() const;          // Find whether the type of a variable is string
    public bool is_object() const;          // Finds whether a variable is an object
    public bool is_array() const;           // Finds whether a variable is an array

    public string get_class() const;        // Returns the name of the class of an object
}
}}}

=== `gettype()` ===

Get the type of a variable. Actually returns the `variant` type name.

{{{
public string variant::gettype() const;
string gettype(const variant var); // Procedural style
}}}

|| *returns* || Returns the string representation of the type property of the variant object ||

=== `settype()` ===

Set the type of a variable

{{{
public bool variant::settype(string type);
bool settype(const variant var, string type); // Procedural style
}}}

=== `boolval()` ===

Get the boolean value of a variable (PHP 5 >= 5.5.0)

{{{
public bool variant::boolval() const;
bool boolval(const variant var);
}}}

{{{
bool 	toBool() const;
}}}

=== `intval()` ===

Get the integer value of a variable

{{{
public int variant::intval() const; 
}}}

{{{
int 	toInt(bool * ok = 0) const;
}}}

=== `strval()` ===

Get string value of a variable

{{{
public string variant::strval() const;
}}}

{{{
QString 	toString() const;
}}}

=== `floatval()` ===

Get float value of a variable

{{{
public float variant::floatval() const;
}}}

{{{
double 	toDouble(bool * ok = 0) const;
}}}

=== `is_null()` ===
Finds whether a variable is `null`. A variant is `null` when its variant type is `nulltype`.

{{{
public bool variant::is_null() const;
bool is_null(variant var);
}}}

{{{
bool QVariant::isNull() const;
}}}

{{{
bool is_null(QVariant& var)
{
    const char* actual_type = var.typeName();
    const char* expected_type = typeid(nullptr_t).name();

    if (strlen(actual_type) == strlen(expected_type))
    {
        return !strcmp(actual_type, expected_type);
    }
    return false;
}
}}}

=== `is_bool()` ===
Finds out whether a variable is a boolean 
{{{
public bool variant::is_bool() const;
}}}
=== `is_float()` ===
Finds whether the type of a variable is float
{{{
public bool variant::is_float() const;
}}}

=== `is_int()` ===
Find whether the type of a variable is integer
{{{
public bool is_int() const;
}}}

=== `is_numeric()` ===
Finds whether a variable is a number or a numeric string

=== `is_string()` ===
Find whether the type of a variable is string
{{{
public bool is_string() const;
}}}
=== `is_object()` ===
Finds whether a variable is an object
{{{
public bool is_object() const;
}}}
=== `is_array()` ===
Finds whether a variable is an array
{{{
public bool is_array() const;
}}}
=== `get_class()` ===
Returns the name of the class of an object
{{{
public string get_class() const;  
}}}