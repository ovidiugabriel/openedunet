=== `db_row()` ===

Extract a record row from the given `sql` query output result executed on a `database` connection.

{{{
dictionary<string, string> db_row(string sql)
dictionary<string, string> db_row(string sql, Databse database)
}}}

|| *`sql`* || ... ||
|| *`database`* || `[optional]` Database connection. If not specified, the default connection is used. ||
|| *returns* || Returns a dictionary where keys are field names and values are field values in the selected record. ||


=== `db_result()` ===

{{{
list<dictionary<string, string>> db_result(string sql)
list<dictionary<string, string>> db_result(string sql, Database db)
}}}

=== `db_value()` ===

Extracts the value of the `field` after running the `sql` command on a `database` connection.

{{{
string db_value(string field, string sql)
string db_value(string field, string sql, Database database)
}}}

|| *`field`* || The name of the field to be extracted from query execution output result ||
|| *`sql`* || The SQL command to be executed on the database server ||
|| *`db`* || `[optional]` `Database` connection. If not specified, the default connection is used.  ||
|| *returns* || `string` ... ||

=== `db_column()` ===

{{{
list<string> db_column(string sql, string field)
list<string> db_column(string sql, string field, Database db)
}}}

=== `db_result_assoc()` ===

{{{
dictionary<string, dictionary> db_result_assoc(string sql, string field)
dictionary<string, dictionary> db_result_assoc(string sql, string field, Database db)
}}}

=== `db_column_assoc` ===

{{{
function db_column_assoc(string sql, string keyfield, string selfield, Database db)
function db_column_assoc(string sql, string keyfield, string selfield, Database db)
}}}

=== `GetSQLValueString()` ===

Executes proper escaping for the given input `value` and `type`.

{{{
string GetSQLValueString( variant value, string type )

string GetSQLValueString( variant value, 
                          string  type, 
                          variant theDefinedValue )

string GetSQLValueString( variant value, 
                          string  type, 
                          variant theDefinedValue, 
                          variant theNotDefinedValue )
}}}

|| *`value`* || ... ||
|| *`type`* || <ul><li>`'text'`</li><li>`'long'` or `'int'`</li><li>`'double'`</li><li>`'date'`</li><li>`'defined'`</li></ul>||
|| *`theDefinedValue`* || `[optional]` ||
|| *`theNotDefinedValue`* || `[optional]` ||
|| *returns* || `string` ... ||