{{{
public class ClassName {
    public int AttributeName;
    public int OperationName();
}

}}}

== Class ==

  # Does the name `ClassName` clearly describe the class?
  # Is `ClassName` a noun or a noun phrase?
  # Could the name `ClassName` be misinterpreted to mean something else?
  # Does `ClassName` be its own class or a simple attribute of another class?
  # Does `ClassName` do exactly one thing and do it well?
  # Could `ClassName` be broken down in two or more classes?
  # Do all attributes of `ClassName` start with meaningful values?
  # Could you write an invariant for this class?
  # Do all constructors establish the class invariant?
  # Do all operations maintain the class invariant?
  # Could `ClassName` be defined in a different location in the class hierarchy?
  # Have you planned to have subclasses of `ClassName`?
  # Could `ClassName` be eliminated from the model?
  # Is there another class in the model that should be revised or eliminated because it serves the same purpose as `ClassName`?
  # For what reasons will an instance of `ClassName` be updated?
  # Is there some other object that must be updated whenever `ClassName` is updated?

== Operation ==

  # Does the name `OperationName` clearly describe the operation?
  # Is `OperationName` a verb or verb phrase?
  # Could the name `OperationName` be misinterpreted to mean something else?
  # Does `OperationName` do one thing and do it well?
  # Is the return type too restrictive to represent all possible values returned by `OperationName`?
  # Does the return type allow return values that could never be correct?
  # Could `OperationName` be combined with some other operation of `ClassName`?
  # Could `OperationName` be broken down into two or more parts (preprocess, main processing, postprocessing, etc)?
  # Could `OperationName` be replaced by a series of client calls to simpler operations?
  # Could `OperationName` be combined with other operations to reduce the number of calls clients must make?
  # Can `OperationName` handle all possible inputs?
  # Are there special case inputs that must be handled separately?
  # Could you write an expression to check if the arguments fo `OperationName` are correct? Plausible?
  # Can you express the preconditions of `OperationName`?
  # Can you express the postconditions of `OperationName`?
  # How will `OperationName` behave if preconditions are violated?
  # How will `OperationName` behave if postconditions cannot be achieved?
  # Could `OperationName` be defined in a different class that is associated with `ClassName`?
  # Could `OperationName` be moved up the inheritance hierarchy to apply to `ClassName` and to other classes?
  # Does `OpeartionName` apply to all instances of class `ClassName` including instances of subclasses?
  # Could `OperationName` be eliminated from the model?
  # Is there another operation in the model that should be revised or eliminated beacause it serves the same purpose as `OperationName`?

== Attribute ==

  # Does the name `AttributeName` clearly describe the attribute?
  # Is `AttributeName` a noun or noun phrase?
  # Could the name `AttributeName` be misinterpreted to mean something else?
  # Is the type too restrictive to represent all possible values of `AttributeName`?
  # Does the type allow values for AttributeName that could never be correct?
  # Could `AttributeName` be combined with some other attribute of `ClassName` ?
  # Could `AttributeName` be broken down into two more parts (a phone number can be broken down into area code, prefix, and number)?
  # Could `AttributeName` be computed from other attributes instead of stored?
  # Should `AttributeName` have an initial (or default) value?
  # Is the initial value correct?
  # Could you write an expression to check if AttrbuteName is correct? Plausible?
  # Could `AttributeName` be defined in a different class that is associated with `ClassName`?
  # Could `AtrributeName` be moved up the inheritance hierarchy to apply to AttributeName and to other classes?
  # Does `AttributeName` apply to all instances of class ClassName including instances of subclasses?
  # Could `AttrbiuteName` be eliminated from the model?
  # Is there another attribute in the model that should be revised or eliminated because it serves the same purpose as `AttributeName`?
  # For what reasons will `AttrbiuteName` be updated?
  # Is there some other attribute that must be updated whenever AttributeName is updated?
  # Is there a method that should be called when AttributeName is updated?
  # Is there a method that should be called when AttributeName is given a certain kind of value?