= Config Class =
The _Config_ class is a *Key-Value-Type store*.

That is a key-value store, but inside each value caries its own associated type.

Without using this feature, each time you request a field value from a database you will get a string - and you have to manually convert the value to the assumed type. _Maybe the assumed type it is the correct one, but you could also be wrong_.

== Basic Feature ==

In order to *avoid assuming the correct type*, this function converts the stored string value to the suitable type for the variable - that type is stored internally in the database.

== Extended Feature ==

Another important feature is that object data is automatically serialized into a specific form in the database, and they are automatically unserialized when you are accessing the key.

=== Reading Key Values ===

{{{
public variant Config::get(string key) [static]
}}}

|| *key* || the label of the key you need to read ||
|| *returns* || the key value - it can have one of the following supported types:  boolean, float, integer, string, object, array (for both list and dictionary). ||

=== Writing Key Values and Creating New Keys ===

{{{
public nulltype Config::set(string name, string type, variant value) [static]
}}}

|| *name* || ||
|| *type* || ||
|| *value* || ||
|| *returns* || *null* ||

Set mupliple keys at once 
TODO: a single insert :D

{{{
public nulltype Config::set(array values, string type) [static]
}}}