= Config Class =
The _Config_ class is a *Key-Value-Type store*.

That is a key-value store, but inside each value caries its own associated type.

Without using this feature, each time you request a field value from a database you will get a string - and you have to manually convert the value to the assumed type. _Maybe the assumed type it is the correct one, but you could also be wrong_.

== Basic Feature ==

In order to *avoid assuming the correct type*, this function converts the stored string value to the suitable type for the variable - that type is stored internally in the database.

== Extended Feature ==

Another important feature is that object data is automatically serialized into a specific form in the database, and they are automatically unserialized when you are accessing the key.

=== Reading Values ===

{{{
public variant Config::get(string name) [static]
}}}

|| *name* || the name of the key you need to read ||
|| *returns* || the value of the key - it can have one of the following supported types:  boolean, float, integer, string, object, array (for both list and dictionary). ||

=== Writing Values / Creating New Keys ===

New keys are automatically created when you are trying to set the value for a key that doesn't exists already. You don't have to worry about this issue. No existence check or create calls are necessary.

[http://ro1.php.net/manual/en/class.serializable.php Serializable interface]

{{{
public nulltype Config::set(string name, string type, variant value) [static]
}}}

Converts the _value_ to the specified _type_ and stores it into the database (using the representation format specified by _type_).

|| *name* || the name of the key you want to write (or create) ||
|| *type* || <div>in case that _value_ has primitive types: a long standard type name</div><ul><li>_'boolean'_</li><li> _'float'_</li><li>_'integer'_</li><li>_'string'_</li></ul><div> in case that _value_ is an objects an array: the serialization method must be specified</div><div><ul><li>_'json'_</li><li>_'hexdump'_ (not implemented)</li><li>_'serialize'_ (not recommended, use _'json'_ instead)</li><li>_'yaml'_ (proposal)</li><li> _'xml'_ (proposal)</li></ul></div> ||
|| *value* || value to be stored into the database ||
|| *returns* || *null* ||

Set mupliple keys at once ... TODO: single insert.

{{{
public nulltype Config::set(array values, string type) [static]
}}}